//* Array

//? arr.at(i)
// это ровно то же самое, что и arr[i], если i >= 0.
// для отрицательных значений i, он отступает от конца массива.

// ? push(elem1, elem2, ...) =======================================================
// добавляет элемент(ы) в конец. Возвращает число - обновленную длинну
//? pop()
// удоаляет последний элемент массива. Возвращает его значение
//? unshift(elem1, elem2, ...)
// добавляет новые элемениы в начало массива. Возвращает обновленную длинну. Индексы смещаются.
//? shift()
// удоаляет первый элемент массива. Возвращает его значение

// Методы push/pop выполняются быстро, а методы shift/unshift – медленно.

//? for..of ========================================================================
// не предоставляет доступа к номеру текущего элемента, только к значению
//? for..in
// Доступ к индексу. Намного медленнее, т к создан для объектов

//? .lehgth ========================================================================
// Если быть точными, это не количество элементов массива,
// а наибольший цифровой индекс плюс один!
let fruits = [];
fruits[123] = "Яблоко";
console.log(fruits.length); // 124 !!!
// Если вручную изменить .length данные будут утеряны!
// arr.length = 0;.- очистка массива
let arr = [1, 2, 3, 4, 5];
arr.length = 2;
console.log(arr); // [ 1, 2 ]

//? new Array(number)
// создаёт массив с заданной длиной, но без элементов
// new Array(elem1, elem2, ...)
console.log(!!null);
