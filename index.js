//* Array

//? new Array(number)
// создаёт массив с заданной длиной, но без элементов
// или new Array(elem1, elem2, ...)

//? arr.at(i)
// это ровно то же самое, что и arr[i], если i >= 0.
// для отрицательных значений i, он отступает от конца массива.

//? .lehgth ========================================================================
// Если быть точными, это не количество элементов массива,
// а наибольший цифровой индекс плюс один!
let fruits = [];
fruits[123] = "Яблоко";
console.log(fruits.length); // 124 !!!
// Если вручную изменить .length данные будут утеряны!
// arr.length = 0;.- очистка массива
let arr100 = [1, 2, 3, 4, 5];
arr100.length = 2;
console.log(arr100); // [ 1, 2 ]

//? for..of ========================================================================
// не предоставляет доступа к номеру текущего элемента, только к значению
//? for..in
// Доступ к индексу. Намного медленнее, т к создан для объектов
//? for (;;)

// ? push(elem1, elem2, ...) =======================================================
// добавляет элемент(ы) в конец. Возвращает число - обновленную длинну
//? pop()
// удоаляет последний элемент массива. Возвращает его значение
//? unshift(elem1, elem2, ...)
// добавляет новые элемениы в начало массива. Возвращает обновленную длинну. Индексы смещаются.
//? shift()
// удоаляет первый элемент массива. Возвращает его значение

// Методы push/pop выполняются быстро, а методы shift/unshift – медленно.

//? arr.splice(start, deleteCount?, elem1?, ..., elemN?) ==========================
// start (обяз) с этого индекса удаляет deleteCount элементов. Не указан - удалять до конца
// Отрицательные индексы разрешены
// elem1, ..., elemN вставляет на их место
// Возвраацает массив из удаленных элемнтов
//? arr.slice(start?, end?)
// копирует все элементы с индекса start до end (не включая).
// start и end могут быть отрицательными - отсчёт позиции будет вестись с конца.
// start и end не указаны - КОПИРУЕТ ВЕСЬ массив
// возвращает новый массив

//? arr.concat(arg1?, arg2?, ...) =====================================================
// принимает любое кол-во аргументов, которые могут быть как массивами, так и простыми значениями.
// возвращает НОВЫЙ массив, не измменяет аргументы

//? arr.forEach((item, index?, array?) => {}, thisArg?) ==============================
// перебирает массив без создания нового
// НИЧЕГО не возвращает, ничего не изменяет в самом массиве

//? arr.indexOf(item, from?) ==========================================================
// ищет item начиная с индекса from
// возвращает номер индекса или -1
//? arr.includes(item, from?)
// возвращает true/false
console.log("================ work ================");
let arr5 = [];
let arr = ["t", "e", "s", "t"];
arr.forEach((item) => arr5.push(item + "0"));
console.log(arr5);
