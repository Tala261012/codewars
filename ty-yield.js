/*
* Генераторы
Генераторы могут порождать (yield) множество значений одно за другим, 
по мере необходимости. Генераторы отлично работают с перебираемыми объектами 
и позволяют легко создавать потоки данных.
*/

function* generateSequence() {
  yield 1;
  yield 2;
  return 3;
}
let generator = generateSequence();

let one = generator.next();

alert(JSON.stringify(one)); // {value: 1, done: false}
/*
Когда такая функция вызвана, она не выполняет свой код. 
Она возвращает СПЕЦИАЛЬНЫЙ ОБЪЕКТ, так называемый «генератор», 
для управления её выполнением. Основной метод  - next(). 
При вызове он запускает выполнение кода до ближайшей инструкции yield <значение> 
(значение может отсутствовать, в этом случае оно undefined). 
По достижении yield выполнение функции приостанавливается, 
а соответствующее значение – возвращается во внешний код.
Результатом метода next() всегда является объект с двумя свойствами:
value: значение из yield.
done: true, если выполнение функции завершено, иначе false.
(см. выше)

Если вызвать генератор после того как он завершен (done: true),
ошибки не будет, будет возвращаться один и тот же объект { value: undefined, done: true }

? for..of
генераторы являются перебираемыми объектами.
for(let value of generator) {
  alert(value); // 1, затем 2
}
Значение 3 выведено не будет!
перебор через for..of игнорирует последнее значение, при котором done: true

именно return устанавливает done: true

если мы хотим, чтобы были все значения при переборе через for..of, 
то надо возвращать их через yield.

? ...
Так как генераторы являются перебираемыми объектами, мы можем использовать 
всю связанную с ними функциональность, например оператор расширения ...

let seq = [0, ...generateSequence()];
console.log(seq); //[ 0, 1, 2, 3 ]

? function* f(…) или function *f(…)
оба синтаксиса корректны.
*/
let range = {
  from: 1,
  to: 5,

  *[Symbol.iterator]() {
    // краткая запись для [Symbol.iterator]: function*()
    for (let value = this.from; value <= this.to; value++) {
      yield value;
    }
  },
};

console.log([...range]); // 1,2,3,4,5
/*
прежний вариант перебираемого объекта
let range = {
  from: 1,
  to: 5,

  [Symbol.iterator]() {
    return {
      current: this.from,
      last: this.to,

      next() {
        if (this.current <= this.last) {
          return { done: false, value: this.current++ };
        } else {
          return { done: true };
        }
      }
    };
  }
};
Это не совпадение, конечно. Генераторы были добавлены в язык JavaScript, 
в частности, с целью упростить создание перебираемых объектов.
*/
