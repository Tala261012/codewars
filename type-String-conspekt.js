//* String

//? Сроки неизменяемы!

//? \
// символ экранирования, \t - tab, \n - enter
//? .length
// свойство, длинна строки
//? `${выражение}`

//? str[index], str.at(index)
// доступ к символу (начиная с 0), str.at(i) можно использовать отриыательное значение
let str = `Hello`;
// console.log(str.at(-1)); // o

// Также можно перебрать строку посимвольно, используя
//? for..of
// for (let char of str) {
//   console.log(char);
// }

//? toLowerCase() и toUpperCase()
// меняют регистр символов

//? .indexOf(substr, pos?)
// ищет подстроку substr в строке str, начиная с позиции pos,
// и возвращает позицию, на которой располагается совпадение, либо -1
//? .lastIndexOf(substr, position?)
// похожий метод, ищет с конца строки к её началу
// position - это будет типа-коеец строки
let str2 = "Ослик Иа-Иа посмотрел на виадук";
let target = "Иа";

let pos = -1;
while ((pos = str2.indexOf(target, pos + 1)) != -1) {
  console.log(pos);
}

console.log("last index ", str2.lastIndexOf(target, 7)); // т е искать раньше 7

//? .includes(substr, pos?)
// возвращает true, если в строке str есть подстрока substr, true/false

//? .startsWith(substr, start?), str.endsWith(substr, end?)
// проверяют, соответственно, начинается ли и заканчивается ли строка определённой подстрокой
// start с какого символа начинать
// end на какогм символе заканчивать поиск

//? .slice(start, end?) (лучше использовать его)
//Возвращает часть строки от start (включая) до end (не включая). Или до коныа строки
// Можно использовать отрицательные значение - т е считать с конца строки, начиная с -1
//? .substring(start, end?)
// не поддерживает отрицательные аргументы, можно поменять start и end местами
//? .substr(start, length?)
// Возвращает часть строки от start длины length.
// start может быть отрицательным

//? Строчные буквы "больше" заглавных

//? str.codePointAt(pos)
// Возвращает код для символа, находящегося на позиции pos
//? String.fromCodePoint(code)
// Создаёт символ по его коду code

//?  str.localeCompare(str2)
//  возвращает число, которое показывает, какая строка больше в соответствии с
// правилами языка:
// Отрицательное число, если str меньше str2.
// Положительное число, если str больше str2.
// 0, если строки равны.

//? str.trim()
// убирает пробелы в начале и конце строки.

//? str.repeat(n)
// повторяет строку n раз.

//? str.conscat(str1, str2, ...)
// объединяет str с str1, str2 и т д

//? padStart(amount, str), padEnd(amount, str)
// добаляет в начало/конец строки str
// amount - кол-во символов в итоговой! строке (могут быть обрезаны или повторяться)
